*************************************************************************************************************
_____________________________________________________________________________________________________________
06.01.25
Sprint 5
Task 23

0. Solve two simple problems on the leetcode and commit changes to the git repo
1. Check the materials about automation with Selenium
2. Create repo for Selenium scripts. Create Fully automated script to login and navigate to the repo (https://github.com/Svajunas900)
   Selenium script should collect the information about all the repos and save the names of the repos and the names of the files to
   local PostgreDB in to the table git_repo (repo_id, repo_name, files_list). Connection to the DB should be realised with Singleton 


Teach materials:
https://www.linkedin.com/learning/using-python-for-automation-2023/automate-everything-with-python?u=89254810
https://www.linkedin.com/learning/learning-selenium/welcome?u=89254810
https://www.linkedin.com/learning/test-automation-with-python-5-web-browser-automation-with-selenium/java-setup?u=89254810
https://www.linkedin.com/learning/test-automation-foundations/build-a-foundation-of-test-automation?u=89254810
______________________________________________________________________________________________________________
07.01.25
Sprint 5
Task 24

0. solve two simple tasks on the leetcode and commit changes to the git
1. Based on the previous Django competition project add the payment acceptance
   a. Using the Fa√ßade pattern create the payment system for: 
      Bank card, Virtual user account, Crypto.
   b. Add route, url and separate page for each user
   c. Add table payment_methods (id, method)
   d. Add table user_payment (id, user_id, payment_method, payment_value, date_time)
   e. Each user could make the payment for the competition participation after the login
2. All payments should be checked in the admin login page and administrator could include and exclude the participants to each separate
   competition
3. Add the checking function which is checking that the payments could be done only till the end registration day.
   The End registration day must set in the competition by the admins. Add the column to the competition table: end_registration_date
______________________________________________________________________________________________________________
08.01.25
Sprint 5
Task 25

0. Solve two simple tasks on the leetcode and commit to the git
1. Based on the previous Django competition solution:
   a. Create separate FastAPI app which:
      a.1. Should work with own schedule (each 10 minutes) and scribe (using Selenium) the information (just public) about: 
           active competitions, finished competitions, registered to the active competition competitors.
      a.2 All information should be saved in the SQLite database.
      a.3 Provide the collected information (return it) by the two routes: 1 - Active competition (with the list of competitors)s;
          2 - Finished competitions (with the competitors list);
      a.4 Returned information should be in the JSON format.
   b. FastAPI app should work locally and inside docker container
   c. FastAPI should be covered with tests
______________________________________________________________________________________________________________
09.01.25
Sprint 5
Task 26

0. Solve two simple task on the leetcode and commit changes to the git repo
1. Based on the previous Django project add the "captcha" to the login page for all users. Captcha should use the simple math operation
   solution
3. Based on the FastAPI graber from Django competition add to the FastAPI OAuth JWT tokens authentication. Each token should be generated in
   the separate simple Flask App with simple user authentication. Token should be available no more than 12 hours.
   Flask token generation app should run local and on the docker, also should have own SQLite database with users.
______________________________________________________________________________________________________________
